"""
Collett â€“ Icon Theme Utils
==========================

This file is a part of Collett
Copyright (C) 2025 Veronica Berglyd Olsen

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
"""
from __future__ import annotations

import subprocess
import sys

from pathlib import Path
from xml.etree import ElementTree as ET

ET.register_namespace("", "http://www.w3.org/2000/svg")
ROOT_DIR = Path(__file__).parent.parent
ICONS = {
    "cls_archive": "archive",
    "cls_character": "team",
    "cls_custom": "price-tag-3",
    "cls_entity": "building",
    "cls_location": "road-map",
    "cls_novel": "git-repository",
    "cls_object": "knife-blood-line",
    "cls_plot": "puzzle-2",
    "cls_trash": "delete-bin",

    "prj_chapter": "file-text",
    "prj_document": "file-text",
    "prj_folder": "folder-6",
    "prj_note": "file-4",
    "prj_scene": "file-text",
    "prj_title": "file-text",

    "menu_project": "booklet",

    "add": "add-large",
    "bookmarks": "bookmark",
}


def _fixXml(svg: ET.Element) -> str:
    """Clean up the SVG XML and add needed fields."""
    svg.set("fill", "#000000")
    svg.set("height", "128")
    svg.set("width", "128")
    return ET.tostring(svg).decode()


def _writeThemeFile(
    path: Path, name: str, author: str, license: str, icons: dict[str, ET.Element]
) -> None:
    """Write an icon theme file."""
    width = max(len(k) for k in ICONS.keys())
    padding = " "*width
    with open(path.with_suffix(".icons"), mode="w", encoding="utf-8") as out:
        out.write("# This file is automatically generated. Do not edit.\n\n")
        out.write("# Meta\n")
        out.write(f"meta:name    = {name}\n")
        out.write(f"meta:author  = {author}\n")
        out.write(f"meta:license = {license}\n")
        out.write("\n")
        out.write("# Icons\n")
        for key, svg in icons.items():
            padded = f"{key}{padding}"[:width]
            out.write(f"icon:{padded} = {_fixXml(svg)}\n")
        print(f"- Wrote: {len(icons)} icons")
        print(f"- Target: {path.relative_to(ROOT_DIR)}")
    return


def _cloneRepo(repoPath: Path, repoUrl: str) -> None:
    """Clone or update a local repo of icons."""
    print(f"Updating: {repoUrl}")
    if not repoPath.is_dir():
        subprocess.call(["git", "clone", repoUrl, "--depth", "50"], cwd=repoPath.parent)
    else:
        subprocess.call(["git", "pull"], cwd=repoPath)
    print("")
    return


def processRemix(workDir: Path, iconsDir: Path, jobs: dict) -> None:
    """Process Remix icons of a given spec and write output file."""
    srcRepo = workDir / "RemixIcon"
    _cloneRepo(srcRepo, "https://github.com/Remix-Design/RemixIcon.git")

    for file, job in jobs.items():
        name: str = job["name"]
        style = "fill" if job["filled"] else "line"

        print(f"Processing: {name}")

        icons: dict[str, ET.Element] = {}
        iconSrc = srcRepo / "icons"
        iconGroups = [x for x in iconSrc.iterdir() if x.is_dir()]
        for key, icon in ICONS.items():
            if icon.endswith(("-line", "-fill")):
                fileName = f"{icon}.svg"
            else:
                fileName = f"{icon}-{style}.svg"
            for group in iconGroups:
                iconFile = group / fileName
                if iconFile.is_file():
                    break
            else:
                fileName = f"{icon}.svg"
                for group in iconGroups:
                    iconFile = group / fileName
                    if iconFile.is_file():
                        break
                else:
                    print(f"Not Found: {fileName}")
                    continue

            icons[key] = ET.fromstring(iconFile.read_text(encoding="utf-8"))

        target = iconsDir / f"{file}.icons"
        _writeThemeFile(target, name, "Remix Icon", "Apache 2.0", icons)

    print("")

    return


def main(sources: str) -> None:
    """Build icon themes entry point."""
    print("")
    print("Build Icon Themes")
    print("=================")
    print("")

    workDir = Path(sources).absolute()
    if not workDir.is_dir():
        print(f"Source directory not found: {workDir}")
        sys.exit(1)

    outDir = ROOT_DIR / "assets" / "icons"
    outDir.mkdir(exist_ok=True)
    processRemix(workDir, outDir, {
        "remix_outline": {
            "name": "Remix Icon - Outline",
            "filled": False,
        },
        "remix_filled": {
            "name": "Remix Icon - Filled",
            "filled": True,
        },
    })

    print("Done")
    print("")

    return


if __name__ == "__main__":
    """Parse command line options and run the commands."""
    main(sys.argv[-1])
